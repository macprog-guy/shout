'use strict'

/*

 Benchmarks

 The goal of these small benchmarks is to evaluate the overhead generated by
 the use of our "publish/subscribe" library as opposed to having objects 
 notify observers directly.
 
*/

const Benchmarkify = require('benchmarkify'),
      benchmark    = new Benchmarkify("ShoutJS").printHeader(),
      Shout        = require('../index.js')

const bench = benchmark.createSuite("Synchronous cases")


const nullMiddleware = (payload, meta, next) => { next(payload, meta) },
      nullSubscriber = () => {}



// ------------------------------------------------------------------------
//
// Object Notification
//
// NOTE: we use a plain for loop just like in our optimized code because
//       using a for-of loop reduced raw performance.
//
// ------------------------------------------------------------------------

function notify() {
  
  const o = this.observers,
        n = o.length,
        v = this.value

  for (let i=0;  i<n;  i++)
    o[i](this, v)
}

const object = { value: 1 }
object.observers = [nullSubscriber]
object.notify = notify.bind(object) 


bench.add('Direct observer callback', () => {
  object.notify()
})


// ------------------------------------------------------------------------
//
// Publishing to the root topic with one subscriber
//
// ------------------------------------------------------------------------

const topics1 = Shout()
topics1.subscribe(nullSubscriber)

bench.add('Publish to the root topic with one subscriber', () => {
  topics1.publishSync('hello')
})


// ------------------------------------------------------------------------
//
// Publishing to a nested topic with one subscriber
//
// ------------------------------------------------------------------------

const topics2   = Shout(),
      subtopic2 = topics2('foo.bar.baz').subscribe(nullSubscriber)

bench.add('Publishing to a nested topic with one subscriber', () => {
  subtopic2.publishSync('hello')
})


// ------------------------------------------------------------------------
//
// Publishing to a nested topic with subscribers on topic chain
//
// ------------------------------------------------------------------------

const topics3   = Shout(),
      subtopic3 = topics3('foo')
                    .subscribe(nullSubscriber)
                    .subtopic('bar')
                      .subscribe(nullSubscriber)
                      .subtopic('baz')
                        .subscribe(nullSubscriber)

bench.add('Publishing to a nested topic with subscribers on topic chain', () => {
  subtopic3.publishSync('hello')
})


// ------------------------------------------------------------------------
//
// Publishing to a nested topic with subscribers all along the topic chain
// and a middleware function at each level also
//
// ------------------------------------------------------------------------

const topics4   = Shout(),
      subtopic4 = topics3('foo')
                    .use(nullMiddleware)
                    .subscribe(nullSubscriber)
                    .subtopic('bar')
                      .use(nullMiddleware)
                      .subscribe(nullSubscriber)
                      .subtopic('baz')
                        .use(nullMiddleware)
                        .subscribe(nullSubscriber)

bench.add('Publishing to a nested topic with subscribers and middleware on topic chain', () => {
  subtopic4.publishSync('hello')
})



bench.run()

